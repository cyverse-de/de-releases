{{with datasource "config"}}apiVersion: v1
kind: Secret
metadata:
  name: configs
type: Opaque
stringData:
  DE_ENV: "{{.Environment}}"
  USER_SUFFIX: "{{.UIDDomain}}"
  QMS_DATABASE_URI: "postgresql://{{.QMSDB.User}}:{{.QMSDB.Password | urlencode}}@{{.QMSDB.Host}}:{{.QMSDB.Port}}/{{.QMSDB.Name}}?sslmode=disable"
  DE_DATABASE_URI: "postgresql://{{.DEDB.User}}:{{.DEDB.Password | urlencode}}@{{.DEDB.Host}}:{{.DEDB.Port}}/{{.DEDB.Name}}?sslmode=disable"
  NOTIFICATIONS_DATABASE_URI: "postgresql://{{.NewNotificationsDB.User}}:{{.NewNotificationsDB.Password | urlencode}}@{{.NewNotificationsDB.Host}}:{{.NewNotificationsDB.Port}}/{{.NewNotificationsDB.Name}}?sslmode=disable"
  METADATA_DATABASE_URI: "postgresql://{{.MetadataDB.User}}:{{.MetadataDB.Password | urlencode}}@{{.MetadataDB.Host}}:{{.MetadataDB.Port}}/{{.MetadataDB.Name}}?sslmode=disable"
  QMS_REINIT_DB: "{{.QMSDB.Reinitialize}}"  ## TODO: remove this value when we've fully migrated to QMS_DATABASE_REINIT
  QMS_DATABASE_REINIT: "{{.QMSDB.Reinitialize}}"
  QMS_DATABASE_MIGRATE: "{{.QMSDB.Automigrate}}"
  USERNAME_SUFFIX: "@{{.UIDDomain}}"
  OTEL_TRACES_EXPORTER: "{{ if (index . "Jaeger" "Endpoint") }}jaeger{{ else }}none{{ end }}"
  OTEL_EXPORTER_JAEGER_ENDPOINT: "{{ if (index . "Jaeger" "Endpoint") }}{{ .Jaeger.Endpoint }}{{ end }}"
  OTEL_EXPORTER_JAEGER_HTTP_ENDPOINT: "{{ if (index . "Jaeger" "HttpEndpoint") }}{{ .Jaeger.HttpEndpoint }}{{ end }}"
  NATS_TLS_CERT: "/etc/nats/tls/tls.crt"
  NATS_TLS_KEY: "/etc/nats/tls/tls.key"
  NATS_TLS_CA_CERT: "/etc/nats/tls/ca.crt"
  NATS_CREDS_PATH: "/etc/nats/creds/services.creds"
  NATS_RECONNECTS_MAX: "10"
  NATS_RECONNECTS_WAIT: "1"
---
apiVersion: v1
kind: Secret
metadata:
  name: unleash-secret
type: Opaque
data:
  database_host: "{{.UnleashDB.Host | base64.Encode}}"
  database_username: "{{.UnleashDB.User | base64.Encode}}"
  database_password: "{{.UnleashDB.Password | base64.Encode}}"
---
apiVersion: v1
kind: Secret
metadata:
  name: {{.Harbor.ProjectQAImagePullSecretName}}
  namespace: {{.Environment}}
data:
  .dockerconfigjson: {{ $authVal := printf "%s:%s" .Harbor.ProjectQARobotName .Harbor.ProjectQARobotSecret | base64.Encode -}}
                    {{- dict "auths" (dict .Harbor.URL (dict "auth" $authVal)) | data.ToJSON | base64.Encode }}
type: kubernetes.io/dockerconfigjson
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: timezone
data:
  timezone: |
    {{.Timezone}}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: java-tool-options
data:
  low: "{{.JVMOpts.Low}}"
  high: "{{.JVMOpts.High}}"
  ui: "{{.JVMOpts.UI}}"
{{end}}
